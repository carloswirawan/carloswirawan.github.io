{"version":3,"sources":["img/carlos.jpg","img/dvc.png","img/ucsd.png","App.js","pages/portfolio.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","redirect","setRedirect","setState","this","to","className","id","title","onClick","Component","Portfolio","src","profilePicture","alt","dvc","ucsd","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,oOC2B5BC,E,4MAtBbC,MAAQ,CACNC,UAAU,G,EAGZC,YAAc,WACZ,EAAKC,SAAS,CAACF,UAAU,K,uDAIzB,OAAIG,KAAKJ,MAAMC,SACN,kBAAC,IAAD,CAAUI,GAAG,eAGpB,yBAAKC,UAAU,OACb,0CACA,wBAAIC,GAAG,WAAP,WACA,4BAAQC,MAAM,wBAAwBC,QAASL,KAAKF,aAApD,kB,GAjBUQ,a,2DC0CHC,E,uKApCP,OACI,yBAAKL,UAAU,aACX,wBAAIC,GAAG,UAAP,8BACA,yBAAKD,UAAU,iBACX,yBAAKM,IAAKC,IAAgBC,IAAI,qBAElC,6BACA,yBAAKR,UAAU,OACX,4BAAI,yCACJ,4BAAQE,MAAM,SAASC,QAASL,KAAKF,aAArC,UACA,4BAAQM,MAAM,KAAKC,QAASL,KAAKF,aAAjC,OAEJ,yBAAKI,UAAU,aACX,4BAAI,yCACJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,qDACA,yBAAKA,UAAU,OAAOM,IAAKG,IAAKD,IAAI,aACpC,qEACA,qDACA,yCAEJ,yBAAKR,UAAU,cACX,mEACA,yBAAKA,UAAU,OAAOM,IAAKI,IAAMF,IAAI,cACrC,qDACA,wDACA,iD,GA9BJJ,a,QCKJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIF,OAAQ,kBACnC,yBAAKjB,UAAU,OACb,kBAAC,EAAD,UAGJ,kBAAC,IAAD,CAAOkB,OAAO,EAAMC,KAAK,aAAaF,OAAQ,kBAC5C,yBAAKjB,UAAU,OACb,kBAAC,EAAD,WAKNoB,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65c36607.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carlos.3b5f165b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dvc.ffa7d746.png\";","module.exports = __webpack_public_path__ + \"static/media/ucsd.171b4ce1.png\";","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    redirect: false,\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({redirect: true});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect)\r\n      return <Redirect to='/portfolio' />\r\n      \r\n    return (\r\n      <div className=\"App\">\r\n        <title>Welcome</title>\r\n        <h1 id=\"Welcome\">Welcome</h1>\r\n        <button title=\"See Carlos' portfolio\" onClick={this.setRedirect}>Portfolio</button>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/portfolio.css\";\r\nimport profilePicture from \"../img/carlos.jpg\"\r\nimport dvc from \"../img/dvc.png\"\r\nimport ucsd from \"../img/ucsd.png\"\r\n// import Image from \"react-bootstrap/Image\";\r\n\r\nclass Portfolio extends Component{\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"Portfolio\">\r\n                <h1 id=\"Header\" >Carlos Wirawan's Portfolio</h1>\r\n                <div className=\"profile-image\">\r\n                    <img src={profilePicture} alt=\"Profile Picture\" />\r\n                </div>\r\n                <hr />\r\n                <div className=\"doc\" >\r\n                    <h2><u>Documents</u></h2>\r\n                    <button title=\"resume\" onClick={this.setRedirect}>Resume</button>\r\n                    <button title=\"cv\" onClick={this.setRedirect}>CV</button>\r\n                </div>\r\n                <div className=\"education\">\r\n                    <h2><u>Education</u></h2>\r\n                    <div className=\"row\">\r\n                        <div className=\"col school\">\r\n                            <h4>Diablo Valley College</h4>\r\n                            <img className=\"logo\" src={dvc} alt=\"DVC logo\" />\r\n                            <h5>A.S. Computer Science and Mathematics</h5>\r\n                            <h5>March 2017 - May 2019</h5>\r\n                            <h5>GPA: 4.0</h5>\r\n                        </div>\r\n                        <div className=\"col school\">\r\n                            <h4>University of California, San Diego</h4>\r\n                            <img className=\"logo\" src={ucsd} alt=\"UCSD logo\" />\r\n                            <h5>B.S. Computer Science</h5>\r\n                            <h5>September 2019 - Present</h5>\r\n                            <h5>GPA: 3.69</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Portfolio from './pages/portfolio'\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Route exact={true} path=\"/\" render={() => (\r\n      <div className=\"All\">\r\n        <App />\r\n      </div>\r\n    )}></Route>\r\n    <Route exact={true} path=\"/portfolio\" render={() => (\r\n      <div className=\"All\">\r\n        <Portfolio />\r\n      </div>\r\n    )}></Route>\r\n\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}